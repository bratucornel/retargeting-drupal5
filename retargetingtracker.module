<?php
/**
 * Created by PhpStorm.
 * User: Cornel
 * Date: 29/08/16
 * Time: 12:03 PM
 */

/*
 * @file
 * Drupal Module: Retargeting Tracker
 * Adds the required Retargeting Javascript code.
 *
 * @author: Cornel Bratu <https://retargeting.biz/>
 */

/*
 * Top section of plugin settings page
 */
function retargetingtracker_help($section) {
    switch ($section) {
        case 'admin/settings/retargetingtracker':
            return t('<a href="@ra_url">Retargeting Tracker</a>', array('@ra_url'=> 'https://retargeting.biz/'));
    }
}

function retargetingtracker_perm() {
    return array(
        'administer retargetingtracker',
        'opt-in or out of tracking',
        'use PHP for tracking visibility'
    );
}

function retargetingtracker_menu($mycache) {
    $items = array();

    if($mycache) {
        $items[] = array(
            'path'              =>  'admin/settings/retargetingtracker',
            'title'             =>  'Retargeting Tracker',
            'description'       =>  'Retargeting tracker settings',
            'callback'          =>  'drupal_get_form',
            'callback arguments'=>  'retargetingtracker_admin_settings_form',
            'access'            =>  user_access('administer retargetingtracker'),
            'type'              =>  MENU_NORMAL_ITEM
        );
    }

    return $items;
}

/*
 * Implement of hook_footer() to insert js script
 */
function retargetingtracker_footer($main = 0) {
    global $user;

    if(module_exists('i18n') && i18n_get_lang() == 'bg') {
        $trackingKey = variable_get('retargetingtracker_js_key', '');
    } else {
        $trackingKey = variable_get('retargetingtracker_js_key_en', '');
    }

    if(empty($trackingKey)) {
        $script = "console.log('Retargeting Tracking API Key not set')";
    } else {
        $script = '
        (function(){
            ra_key = ' . drupal_to_js($trackingKey) . ';
            ra_params = {
                add_to_cart_button_id: "add_to_cart_button_id",
                price_label_id: "price_label_id",
            };
            var ra = document.createElement("script");
            ra.type ="text/javascript";
            ra.async = true;
            ra.src = ("https:" == document.location.protocol ? "https://" : "http://") + "tracking.retargeting.biz/v3/rajs/" + ra_key + ".js";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(ra,s);
        })();';
    }
    /**
     * Do not show Retargeting code for specific user type
     */
    if(!in_array("dealer", $user->roles)) {
        drupal_add_js($script, 'inline', 'header');
    }

    /*
     * checkoutIds
     */

    if(module_exists('uc_cart')) {
        $productsInCart = uc_cart_get_contents();

        if(!empty($productsInCart) && arg(0) == 'cart') {
            $ra_checkout_ids_info = array();
            foreach ($productsInCart as $product) {
                $ra_checkout_ids_info[] = $product->nid;
            }

            $checkout_ids_script = '
            var _ra = _ra || {};
            _ra.checkoutIdsInfo = ' . drupal_to_js($ra_checkout_ids_info) . '
             if (_ra.ready !== undefined) {
                _ra.checkoutIds(_ra.checkoutIdsInfo);
             }       
        ';
            drupal_add_js($checkout_ids_script, 'inline', 'header');
        }
    }

    /*
     * setEmail implementation
     */
    if(isset($user->mail)) {
        $ra_set_email   = '
            var _ra = _ra || {};
            if (_ra.ready !== undefined) {
        ';
        $ra_set_email .= '_ra.setEmail({"email": '.drupal_to_js($user->mail).'});';
        $ra_set_email .= '};';
        drupal_add_js($ra_set_email, 'inline', 'header');
    }

    /*
     * saveOrder
     */
    if(arg(0) == 'cart' && arg(1) == 'checkout' && arg(2) == 'complete') {
        $tax = 0;
        $shipping_cost = 0;
        //        uc_order_load($_SESSION['uc_googleanalytics_order_id']);
        if($order = uc_order_load($_SESSION['retargetingtracker_order_id'])) {

            // Finding name of country; if not found, use the country code.
            if ($country_data = uc_get_country_data(
                array('country_id' => $order->billing_country))
            ) {
                $country = $country_data[0]['country_name'];
            }
            else {
                $country = $order->billing_country;
            }

            foreach ($order->line_items as $line_item) {
                if ($line_item['type'] == 'tax') {
                    $tax += $line_item['amount'];
                }
                if ($line_item['type'] == 'shipping') {
                    $shipping_cost += $line_item['amount'];
                }
            }

            $ra_order_info = array(
                'order_no'      => $order->order_id,
                'lastname'      => $order->billing_first_name,
                'firstname'     => $order->billing_last_name,
                'email'         => $order->primary_email,
                'phone'         => $order->billing_phone,
                'state'         => $country,
                'city'          => $order->billing_city,
                'address'       => $order->billing_street1 . ' ' . $order->billing_street1,
                'discount_code' => 0,
                'discount'      => 0,
                'shipping'      => uc_currency_format($shipping_cost, false),
                'rebates'       => 0,
                'fees'          => $tax,
                'total'         => uc_currency_format($order->order_total, false)
            );

            $ra_order_products = array();
            foreach ($order->products as $product) {
                $ra_order_products['id'] = $product->nid;
                $ra_order_products['qty'] = $product->qty;
                $ra_order_products['price'] = uc_currency_format($product->price, false);
                $ra_order_products['variation_code'] = '';
            }
        }
        $save_order_script = 'var _ra = _ra || {};' . "\r\n";
        $save_order_script .= '_ra.saveOrderInfo = ' . json_encode($ra_order_info) . "\r\n";
        $save_order_script .= '_ra.saveOrderProducts = ' . json_encode($ra_order_products) . "\r\n";
        $save_order_script .= '
         if( _ra.ready !== undefined ) {
            _ra.saveOrder(_ra.saveOrderInfo, _ra.saveOrderProducts);
            }
        ';

        drupal_add_js($save_order_script, 'inline', 'footer');
        unset($_SESSION['retargetingtracker_order_id']);
    }


    /*
     * sendProduct
    */
    $is_product = retargetingtracker_is_product_page();

    if($is_product !== false ){
        retargetingtracker_send_product($is_product);
    }

    /*
     * sendCategory
     */

    $is_category = retargetingtracker_is_category();
    if($is_category !== false) {
        retargetingtracker_send_category($is_category);
    }
}

/*
 * hook_order
 */
function retargetingtracker_order($op, &$arg1, $arg2) {
    switch ($op) {
        case 'new':
            $_SESSION['retargetingtracker_order_id'] = $arg1->order_id;
            break;
    }
}

function retargetingtracker_admin_settings_form() {
    $form['account'] = array(
        '#type'     =>  'fieldset',
        '#title'    =>  'Retargeting Tracker Settings',
        '#collapsible'  => false
    );

    $form['account']['retargetingtracker_js_key'] = array(
        '#type'     =>  'textfield',
        '#title'    =>  'Tracking API KEY for BG',
        '#default_value'    => variable_get('retargetingtracker_js_key', ''),
        '#size'     =>  20,
        '#maxlength'    =>  20,
        '#required'     =>  true,
        '#description'  =>  'Enter your Javascript Tracking Code.'
    );

    $form['account']['retargetingtracker_js_key_en'] = array(
        '#type'     =>  'textfield',
        '#title'    =>  'Tracking API KEY for EN',
        '#default_value'    => variable_get('retargetingtracker_js_key_en', ''),
        '#size'     =>  20,
        '#maxlength'    =>  20,
        '#required'     =>  true,
        '#description'  =>  'Enter your Javascript Tracking Code.'
    );

    $form['account']['retargetingtracker_rest_api'] = array(
        '#type'     =>  'textfield',
        '#title'    =>  'REST API Key',
        '#default_value'    =>  variable_get('retargetingtracker_rest_api', ''),
        '#size'         =>  20,
        '#maxlength'    =>  20,
        '#required'     => true,
        '#description'  =>  'Enter your REST API Key'
    );

    return system_settings_form($form);
}

function retargetingtracker_admin_settings_form_submit($form_id, $form_values) {
    $form_values['retargetingtracker_js_key'] = trim($form_values['retargetingtracker_js_key']);
    $form_values['retargetingtracker_js_key_en'] = trim($form_values['retargetingtracker_js_key_en']);
    $form_values['retargetingtracker_rest_api'] = trim($form_values['retargetingtracker_rest_api']);
    system_settings_form_submit($form_id, $form_values);
}

/*
 * hook_requirements()
 */
function retargetingtracker_requirements($phase) {
    $requirements = array();

    if($phase == 'runtime') {
        //Check if api key is set
        if(variable_get('retargetingtracker_js_key', '') == '') {
            $requirements['retargetingtracker'] = array(
                'title' =>  'Retargeting Tracking module',
                'description'   =>  'Error',
                'severity'  =>  REQUIREMENT_ERROR,
                'value'     =>  'Not configured'
            );
        }
    }
    return $requirements;
}

/*
 * Check if current page is category
 */
function retargetingtracker_is_category() {
    if (arg(0) == 'taxonomy' && arg(1) == 'term' && arg(2)) {
        $category_details = taxonomy_node_get_terms(arg(2));
        return $category_details;
    }
    return false;
}

/*
 * sendCategory
 */
function retargetingtracker_send_category($details) {

    $category_details = array_shift($details);
    $ra_send_category_info  = array(
        'id'    =>  $category_details->tid,
        'name'  =>  $category_details->name,
        'parent' => false,
        'breadcrumb' => array()
    );

    $script = 'var _ra = _ra || {};' . "\r\n";
    $script .= '_ra.sendCategoryInfo = ' . json_encode($ra_send_category_info) . "\r\n";
    $script .= 'if (_ra.ready !== undefined) {
        _ra.sendCategory(_ra.sendCategoryInfo);
    }';

    drupal_add_js($script, 'inline', 'footer');
}

/*
 * Check if current node type is product
 */
function retargetingtracker_is_product_page() {

    if ( arg(0) == 'node' && is_numeric(arg(1)) && !arg(2) ) {
        // Viewing a single node, get the node
        $node = node_load(arg(1));
        // Test for node type, we use a switch to make it easy to look for more than one node type
        switch ( $node->type ) {
            case 'product':
                return $node;
        }
    }
    // If we get here we don't want the block visible
    return false;
}

function retargetingtracker_send_product($node) {
    global $base_url;

    if (module_exists('taxonomy')) {
        $terms = taxonomy_node_get_terms($node->nid);
        if (count($terms)) {
            $term = array_shift($terms);
            $category_id = $term->tid;
            $category_name = $term->name;
        } else {
            $category_id = 999999999;
            $category_name = 'No Category';
        }
    }


    /*
     * Prepare product image
     */
    $ra_image = 'no image';

    if(isset($node->field_image_cache[0])) {
        $ra_image = $base_url . '/' . $node->field_image_cache[0]['filepath'];
    }

    /*
     * Prepare product URL
     */
    $ra_product_url = $base_url . '/' . $node->path;

    /*
     * Product stock is based on post status.
     * if product is published stock: true
     * else stock: false
     */

    $stock = 0;

    if($node->status == 1) {
        $stock = 1;
    }

    /*
     * Keep this code and use it if you decide to use the uc_stock module
     *
     * if(module_exists('uc_stock') && uc_stock_level($node->model) > 0) {
     *     $stock = 1;
     * } else {
     *     $stock = 0;
     * }
     */

    $ra_send_product_info = array(
        'id' => $node->nid,
        'name' => $node->title,
        'url' => $ra_product_url,
        'img' => $ra_image,
        'price' => uc_currency_format($node->list_price, false),
        'promo' => uc_currency_format($node->sell_price, false),
        'brand' => false,
        'category' => array(
            'id' => $category_id,
            'name' => $category_name,
            'parent' => false,
            'breadcrumb' => array()
        ),
        'inventory' => array(
            'variations' => false,
            'stock' => $stock
        )
    );

    $script = "var _ra = _ra || {};" . "\r\n";
    $script .= "_ra.sendProductInfo = " . json_encode($ra_send_product_info) . "\r\n";
    $script .= "if (_ra.ready !== undefined) {
        _ra.sendProduct(_ra.sendProductInfo);}";

    drupal_add_js($script, 'inline', 'footer');

    /*
     * AddToCart
     */
    $retargeting_add_to_cart = '
    if(document.getElementsByClassName("node-add-to-cart").length != 0) {
        document.getElementsByClassName("node-add-to-cart")[0].addEventListener("click", function(){
             _ra.addToCart('.$node->nid.', 1, false, function() {
                console.log("the informations have been sent");
            });
        });
    }
    ';

    drupal_add_js($retargeting_add_to_cart, 'inline', 'footer');

}
